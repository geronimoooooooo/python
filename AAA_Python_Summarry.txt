

+ in der console: python oder py
+ exit() um die command line zu verlassen
+ All classes have a function called __init__(), which is always executed when the class is being initiated. 
The __init__() function is called automatically every time the class is being used to create a new object.
+ The self parameter is a reference to the current instance of the class, and is used to access variables that belongs to the class.
+ module: code library. A file containing a set of functions you want to include in your application.
+ Import only the person1 dictionary from the module: from mymodule import person1
+ Python is a type-inferred language, so you don't have to explicitly define the variable type. It automatically knows that programiz.pro is a string and declares the site_name variable as a string.
+ snake_case, MACRO_CASE, camelCase, CapWords
+ print ('Floor Division: ', a // b) 7//3=2
+ Module is a file that contains code to perform a specific task. A module may contain variables, functions, classes etc.
+ from math import pi as p
+ we can use the dir() function to list all the function names in a module
+ Eine .py Datei ist ein module und mehrere modules/.py in einemm Ordner sind ein package
+ print(random.choice(list1)) # get random item from list1 
+ The index of -1 refers to the last item, -2 to the second last item and so on.
+ List comprehension: numbers = [number*number for number in range(1, 6)]
++ return [v for i, v in enumerate(iterable, start=1) if not i % 2]
-- # breakdown the string into a list of words words = [word.lower() for word in my_str.split()]
+ a= 3.14159; b= 123.4567; print('a: %0.3f and b: %0.2f' %(a ,b)) ==> a: 3.142 and b: 123.46 (print('val: %0.2f' %val))
+  Encapsulation refers to the bundling of attributes and methods inside a single class. 
It prevents outer classes from accessing and changing attributes and methods of a class. This also helps to achieve data hiding.
+ __init__, __str__ or __getitem__ methods. These are special methods that are called by the Python interpreter and not by you
+ self == this
+ Mit der Yield-Anweisung können wir eine Generatorfunktion erstellen. Die Funktion liest und liefert bei jeder Iteration oder 
jedem Funktionsaufruf next() den neuen Datenblock.
>>> for count, (one, two, three) in enumerate(zip(first, second, third)):
...     print(count, one, two, three)
+ Docstring: print(func.__doc__) or print(help(func))

===Commands===
>python --version
>pip --version
>pip list #listet alle installierten packages/module
>pip install <nameOfModule> #z.B. pip install rasterio==1.3.3
>pip show <nameOfModule> #zeigt details und wo das modul abgespeichert ist
>where python #zeigt alle ordner an wo sich eine python version mit python.exe befindet
>py --lists-paths #zeigt alle gefundenen installierten Pythonsversionen an
>where python #zeigt alle Pfade zu gefundenen python.exe
>py -0p #zeigt Version zu alle gefundenen installierten python.exe mit Pfad
>python -c "import sys; print(sys.exec_prefix);print(sys.path)"  #zeigt den Pfad zur aktuell genutzten Pythonversion an

* In order to use the arcpy module you will need to use the Python interpreter that is installed by your ArcGIS client.
  Wenn mehrere unterschiedliche Python Versionen vorhanden sind, dann kann eine spezielle genutzt werden, indem
  Python aus dem Ordner, wo sich die gewünschte spezielle Version befindet, über commandline gestartet wird.  
  C:\Program Files\ArcGIS\Pro\bin\Python\envs\arcgispro-py3>python --version
  Python 3.9.11
  Falls python nicht in dem Ordner aufgerufen, dann nimmt das system die "default python version" her.
  
  
  
  ===for===
  #referring to their index number
  for i in range(len(thistuple)):
  print(thistuple[i])
  
  for i, el in enumerate(list, start=1):
  print(i, el)


===immutable int/string/list===
Zahlen und Strings sind in Python immutable. 2 Variablen teilen nicht die selbe Referenz sobald eine verändert wurde. Listen hingegen schon.
a = 'a'
b = a
print(a,b) ist 'a''a'
a = 'c' #a hat neuen Wert und neue Speicheradresse erhalten. Nicht mehr selbe Referenz wie b
print(a,b) ist 'c''a'

Änderungen bei 1 Liste haben überall bei den anderen Listen die selben Änderungen.


===Iterator===
https://youtu.be/qeOcZiSp3tE?t=448

===yield===
https://youtu.be/qeOcZiSp3tE?t=626
